var documenterSearchIndex = {"docs":
[{"location":"api/#API-1","page":"API","title":"API","text":"","category":"section"},{"location":"example2/#","page":"Example 2","title":"Example 2","text":"EditURL = \"https://github.com/kavir1698/EvoDynamics/blob/master/examples/example2.jl\"","category":"page"},{"location":"example2/#Dummy-example-2-1","page":"Example 2","title":"Dummy example 2","text":"","category":"section"},{"location":"example2/#","page":"Example 2","title":"Example 2","text":"b = 2","category":"page"},{"location":"example2/#","page":"Example 2","title":"Example 2","text":"","category":"page"},{"location":"example2/#","page":"Example 2","title":"Example 2","text":"This page was generated using Literate.jl.","category":"page"},{"location":"example1/#","page":"Example 1","title":"Example 1","text":"EditURL = \"https://github.com/kavir1698/EvoDynamics/blob/master/examples/example1.jl\"","category":"page"},{"location":"example1/#Dummy-example-1","page":"Example 1","title":"Dummy example","text":"","category":"section"},{"location":"example1/#","page":"Example 1","title":"Example 1","text":"a = 2","category":"page"},{"location":"example1/#","page":"Example 1","title":"Example 1","text":"","category":"page"},{"location":"example1/#","page":"Example 1","title":"Example 1","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#EvoDynamics.jl-Documentation-1","page":"Introduction","title":"EvoDynamics.jl Documentation","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Here goes the intro.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"For usage, see Tutorial.","category":"page"},{"location":"tutorial/#Tutorial-1","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/#EvoDynamics.jl's-basic-usage-1","page":"Tutorial","title":"EvoDynamics.jl's basic usage","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"First, define your model parameters. Here is a set of random parameters:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"using Random\nimport LinearAlgebra: Symmetric\n\nP = (4, 5)  # a tuple  specifying the number of traits p for each species\nL = (7, 8)  # a tuple  specifying the number of loci l for each species\nm = 1  # ploidy, m=2 diploid. Currently only haploids are implemented\nparameters = Dict(\n  :L => L,\n  :P => P,\n  :B =>  Tuple([Random.bitrand(i[1], i[2]) for i in zip(P, L)]),  # a tuple  of pleiotropy matrices, one for each species. Each matrix consists of zeros and ones only. make sure no rows are all zero (a trait is not controled :by any locus)\n  :γ => (-0.5, -0.5), # a tuple  of selection coefficients for each species\n  :m => m,\n  :T => Tuple([randn(Float16, n) for n in P]), # a tuple  of arrays, each inner array θ specifying optimal phenotypes for each species\n  :Ω => Tuple([Symmetric(rand(Float16, i[1], i[2])) for i in zip(P, P)]), # a tuple  of matrices, each of wich ω represents a covariance matrix of the selection surface\n  :M => (0.02, 0.02), # a tuple of mutation rates μ for each species\n  :MB => (0.05, 0.05), # a tuple of mutation rates μ<sub>B</sub> for each species\n  :N => (1000, 1000), # a tuple  for population size of each species\n  :Y => Tuple([rand(Float16, i*m) for i in L]), # a tuple  of Arrays, each specifying the initial y vector of each species\n  :E => (0.8, 0.8), # a tuple  of the variance of a normal distribution ε representing environmental noise for each species.\n  :generations => 100 # number of generations to run the simulation\n)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"We can the use the runmodel function to create a model from these parameters and run the simulation.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"EvoDynamics.runmodel","category":"page"},{"location":"tutorial/#EvoDynamics.runmodel","page":"Tutorial","title":"EvoDynamics.runmodel","text":"runmodel(parameters::Dict; kwargs)\n\nCreates and runs a model given parameters. Returns a DataFrame of collected data, which are specified by kwargs.\n\nKeywords\n\ncollect::Dict=Dict(:model => [meanfitnessper_species]) Data to be collected. By default, collects mean population fitness per species.\nwhen::AbstractArray{Int}=1:parameters[:generations] The generations from which data are collected\nreplicates::Int = 0 Number of replicates per simulation.\nparallel::Bool = false Whether to run replicates in parallel. If true, you should add processors to your julia session (e.g. by addprocs(n)) and define your parameters and EvoDynamics on all workers. To do that, add @everywhere before them. For example, @everywhere EvoDynamics.\n\n\n\n\n\n","category":"function"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"using EvoDynamics\ndata = runmodel(parameters)\ndata[1:5, :]","category":"page"}]
}
